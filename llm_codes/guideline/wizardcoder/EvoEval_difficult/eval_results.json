{"eval": {"EvoEval/61": [{"task_id": "EvoEval/61", "solution": "def correct_bracketing_advanced(brackets: str):\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if not stack or bracket_pairs[bracket] != stack.pop():\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n    smallest = second_smallest = float('inf')\n    largest = second_largest = float('-inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n        if second_largest < num:\n            second_largest = second_largest\n            largest = num\n        elif second_largest < num < largest:\n            second_largest = num # fix wrong variable name\n    if second_smallest == float('inf'):\n        smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n    return (second_smallest, second_largest)\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[-1, -2, -3, -4, -5]]], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "\ndef below_above_threshold(l: list, t1: int, t2: int, s: str) -> bool:\n    if s == 'below':\n        for i, num in enumerate(l):\n            if num >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i, num in enumerate(l):\n            if num <= t2:\n                return i\n        return True\n    else:\n        return -1\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    if n < 3:\n        return startSequence[n]\n    else:\n        a, b, c = startSequence[0], startSequenceSequence[1], startSequenceSequence[2]]\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n            if a > p or b > p or c > p:\n                return 'Limit Exceeded'\n        return a\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return '0' * (padding_length - len(binary)) + binary\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [[15, 5]], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "from typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float:\n    weights_sum = sum(w for _, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n    x_weighted_mean = sum(x * w for x, w in numbers) / weights_sum # fix wrong unpacking\n    return sum(w * abs(x - x_weighted_mean) for x, w in numbers) / weights_sum # fix wrong unpacking\n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring)) # fix missing parenthesis\n    return result\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [["", 0]], "plus_fail_tests": []}]}}