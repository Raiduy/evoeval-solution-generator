Here is a Python solution using a stack data structure:

```python
def correct_bracketing(brackets: str) -> bool:
    stack = []
    bracket_pairs = {')': '(', '}': '{', ']':'['}

    for bracket in brackets:
        if bracket in bracket_pairs:
            if not stack or bracket_pairs[bracket] != stack.pop():
                return False
        else:
            stack.append(bracket)

    return not stack
```

This function works by iterating over the input string. If the current character is a closing bracket, it checks if the stack is empty or if the top element of the stack is not the corresponding opening bracket. If either of these conditions is true, the function returns False. If the current character is an opening bracket, it simply adds it to the stack. After iterating over all characters in the input string, if the stack is not empty, the function returns False. Otherwise, it returns True. 