 Here is a Python solution for the problem:

```python
def below_above_threshold(l: list, t1: int, t2: int, s: str):
    if s == 'below':
        for i, n in enumerate(l):
            if n >= t1:
                return i
        return True
    elif s == 'above':
        for i, n in enumerate(l):
            if n <= t2:
                return i
        return True
    else:
        return -1
```

This code iterates over the list checking if each number is either below the first threshold (if `s` is 'below') or above the second threshold (if `s` is 'above'). If it finds a number that is not, it returns the index of that number. If it completes the iteration without finding such a number, it returns True. If `s` is neither 'below' nor 'above', it returns -1.

This code is efficient because it stops as soon as it finds a number that is not below the first threshold or above the second, and it doesn't do any unnecessary work for each number after that. It also uses Python's built-in `enumerate` function to keep track of the index of each number in the list, which is a more efficient way to do it than manually incrementing an index variable.