 Here is a Python solution that uses dynamic programming to efficiently compute the n-th element of the CustomFibFib sequence:

```python
def customFibFib(n: int, startSequence: list, p: int):
    if n < 3:
        return startSequence[n]

    # Initialize a list to store the sequence
    sequence = startSequence.copy()

    for i in range(3, n+1):
        next_value = sequence[i-1] + sequence[i-2] + sequence[i-3]
        if next_value > p:
            return 'Limit Exceeded'
        sequence.append(next_value)

    return sequence[-1]
```

This function first checks if the requested index is less than 3, and if so, it returns the corresponding value from the starting sequence. If the index is 3 or greater, it computes each subsequent value by summing the previous three values in the sequence, checking if the sum exceeds the limit 'p', and appending the new value to the sequence. If the sum exceeds 'p', it immediately returns 'Limit Exceeded'. Finally, it returns the last value computed, which is the n-th element of the CustomFibFib sequence.

This solution has a time complexity of O(n) and a space complexity of O(n), where n is the input to the function. The time complexity is due to the single loop that computes each subsequent value, and the space complexity is due to the list that stores the sequence. This implementation is efficient and resource-friendly, making best use of the available hardware.