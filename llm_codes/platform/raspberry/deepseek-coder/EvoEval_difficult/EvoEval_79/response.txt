Certainly! Below is the implementation of the `decimal_to_binary` function that meets the specified requirements:

```python
def decimal_to_binary(decimal, padding_length):
    # Check for valid input
    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length <= 0:
        return "Invalid Input"
    
    # Convert decimal to binary
    binary_representation = bin(decimal)[2:]  # bin() returns '0b...' so we slice off the '0b'
    
    # Check if the binary representation fits within the padding length
    if len(binary_representation) > padding_length:
        return "Padding length is too small"
    
    # Pad the binary representation with leading zeros
    padded_binary = binary_representation.zfill(padding_length)
    
    # Add the 'db' characters at the beginning and end
    formatted_binary = f"db{padded_binary}db"
    
    return formatted_binary

# Example usage:
print(decimal_to_binary(15, 5))   # Output: "db01111db"
print(decimal_to_binary(32, 5))   # Output: "Padding length is too small"
print(decimal_to_binary(32, 10))  # Output: "db0000100000db"
```

### Explanation:
1. **Input Validation**: The function first checks if the inputs are valid. It ensures that `decimal` is a non-negative integer and `padding_length` is a positive integer.
2. **Binary Conversion**: The `bin()` function is used to convert the decimal number to its binary representation. The `[2:]` slice removes the '0b' prefix that `bin()` adds.
3. **Padding Check**: The function checks if the length of the binary representation exceeds the `padding_length`. If it does, an error message is returned.
4. **Padding**: The `zfill()` method is used to pad the binary string with leading zeros to meet the required `padding_length`.
5. **Formatting**: The `db` characters are added at the beginning and end of the padded binary string.

This implementation ensures that the code is both efficient and easy to understand, making it suitable for execution on a Raspberry Pi.