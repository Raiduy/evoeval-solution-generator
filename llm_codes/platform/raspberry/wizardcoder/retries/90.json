{
    "eval": {
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest > num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
{
    "eval": {
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest> num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
{
    "eval": {
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest > num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
{
    "eval": {
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest > num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
{
    "eval": {
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest > num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
{
    "eval": {
        "EvoEval/61": [
            {
                "task_id": "EvoEval/61",
                "solution": "def correct_bracketing_advanced(brackets: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']':'['}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            if stack and bracket_pairs[bracket] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n\n    return not stack\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/52": [
            {
                "task_id": "EvoEval/52",
                "solution": "def below_above_threshold(l: list, t1: int, t2: int, s: str):\n    if s == 'below':\n        for i in range(len(l)):\n            if l[i] >= t1:\n                return i\n        return True\n    elif s == 'above':\n        for i in range(len(l)):\n            if l[i] <= t2:\n                return i\n        return True\n    else:\n        return -1\n\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/63": [
            {
                "task_id": "EvoEval/63",
                "solution": "\ndef customFibFib(n: int, startSequence: list, p: int):\n    # Create a dictionary to store the computed values\n    computed_values = {0: startSequence[0], 1: startSequence[1]}, 2: startSequenceSequence[2]}\n\n    # Check if the n-th value is already computed\n    if n in computed_values:\n        return computed_values[n]\n\n    # If the n-th value is not already computed, compute it\n    else:\n        computed_values[n] = customFibibFib(n-1, startSequence, p) + customFibFibibFib(n-2, startSequence, p) + customFibFibibFibib(n-3, startSequence, p p)\n\n        # If the sum at any point exceeds the positive integer 'p', return 'Limit Exceeded'\n        if computed_values[n] > p:\n            return 'Limit Exceeded'\n\n        # Otherwise, return the computed n-th value\n        else:\n            return computed_values[n]\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/90": [
            {
                "task_id": "EvoEval/90",
                "solution": "\ndef next_smallest_and_largest(lst):\n    if len(lst) < 2:\n        return (None, None)\n\n    smallest = second_smallest = float('inf')\n    second_largest = smallest\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest > num > smallest:\n            second_smallest = num\n\n        if num > second_largest:\n            second_largest = num\n\n    if second_smallest == float('inf'):\n        second_smallest = None\n    if second_largest == float('-inf'):\n        second_largest = None\n\n    return (second_smallest, second_largest)\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/4": [
            {
                "task_id": "EvoEval/4",
                "solution": "from typing import List, Tuple\n\nfrom typing import List, Tuple\n\ndef weighted_mean_absolute_deviation(numbers: List[Tuple[float, float]]) -> float: # extra ]\n    weights_sum = sum(w for x, w in numbers)\n    if weights_sum != 1.0:\n        return \"Weights must be positive and sum to 1\"\n\n    weighted_mean = sum(x * w for x, w in numbers) / weights_sum\n    return sum(w * abs(x - weighted_mean) for x, w in numbers) / weights_sum\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/79": [
            {
                "task_id": "EvoEval/79",
                "solution": "\ndef decimal_to_binary(decimal, padding_length):\n    if not isinstance(decimal, int) or not isinstance(padding_length, int) or decimal < 0 or padding_length < 0:\n        return \"Invalid Input\"\n    binary = bin(decimal)[2:]\n    if len(binary) > padding_length:\n        return \"Padding length is too small\"\n    return \"0\"*(padding_length-len(binary)) + binary\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        15,
                        5
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/66": [
            {
                "task_id": "EvoEval/66",
                "solution": "\ndef advancedDigitSum(s, t):\n    sum_s = 0\n    sum_t = 0\n\n    for char in s:\n        if char.isupper():\n            sum_s += ord(char)\n\n    for char in t:\n        if char.islower():\n            sum_t += ord(char)\n\n    return (sum_s, sum_t)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/53": [
            {
                "task_id": "EvoEval/53",
                "solution": "\ndef add_elements(list1: list, list2: list, index: int):\n    try:\n        result = list1[index] + list2[index]\n        return (result, False)\n    except IndexError:\n        return (None, True)\n",
                "base_status": "pass",
                "plus_status": null,
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "EvoEval/16": [
            {
                "task_id": "EvoEval/16",
                "solution": "\ndef count_distinct_characters_substrings(string: str, length: int) -> dict:\n    if length > len(string):\n        return {}\n\n    result = {}\n    for i in range(len(string)):\n        substring = string[i:i+length]\n        if len(substring) < length:\n            break\n        result[substring] = len(set(substring))\n    return result\n",
                "base_status": "fail",
                "plus_status": null,
                "base_fail_tests": [
                    [
                        "",
                        0
                    ]
                ],
                "plus_fail_tests": []
            }
        ]
    }
}
